#!/usr/bin/env ruby
require 'pusher'
require 'pusher-client'
require 'msgpack'
require 'xz'
require 'ascii85'

require 'gibberish'
require 'securerandom'
require 'digest/md5'

require 'FileUtils'

require 'gli'

include GLI::App
program_desc 'Pusher based messaging'
version 1.0

def msgpack(data,enc=:encode)
  return data.to_msgpack          if enc == :encode
  MessagePack.unpack(data)
end

def xz(data,enc=:encode)
  return XZ::compress(data)   if enc == :encode
  XZ::decompress(data)
end

def ascii85(data,enc=:encode)
  return Ascii85.encode(data) if enc == :encode
  Ascii85.decode(data)
end


def aes(data,enc=:encode)
  return @cipher.enc(data) if enc == :encode
  @cipher.dec(data)
end


def encode(data,redux=@config[:redux])
  redux.inject(data) do |enc,encoder|
    data = send(encoder.to_sym, data, :encode)
  end
  data
end

def decode(data,redux=@config[:redux])
  redux.reverse.inject(data) do |enc,encoder|
    data = send(encoder.to_sym, data, :decode)
  end
  data
end


# Global options
desc 'Config'
default_value "#{File.basename(__FILE__)}.yml"
arg_name 'config'
flag [:c,:config]

desc 'Secret Key'
default_value "#{File.basename(__FILE__)}.key"
arg_name 'key'
flag [:k,:key]


desc 'Ting server'
arg_name ''
command :server do |cmd|
  cmd.action do |global_options,options,args|
    cfg   = @config[:pusher]
    chan  = cfg[:channel]
    event = cfg[:event]

    loop do
      ifconfig = YAML.load( File.read( @config[:push][:ifconfig] ) )
      payload = {:name=>@config[:dnsmasq][:name],:ip=>ifconfig['ip_addr']}
      Pusher[chan].trigger(event, encode(payload))
      sleep(cfg[:sleep])
    end
  end
end


desc 'Ting client'
arg_name ''
command :client do |cmd|
  cmd.action do |global_options,options,args|
    cfg   = @config[:pusher]

    PusherClient.logger = Logger.new(STDOUT)
    PusherClient.logger.level = Logger::INFO
    options = {:secret => cfg[:secret]} 
    socket = PusherClient::Socket.new(cfg[:key], options)

    # Subscribe to two channels
    socket.subscribe(cfg[:channel])
    socket[cfg[:channel]].bind(cfg[:event]) do |data|
      data = decode(data)
      if data["name"] =~ /^\w+$/ and data["ip"] =~ /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/ then
        # host = @config[:hosts] + "/" + data["name"]
        host = @config[:dnsmasq][:hosts] + "/" + data["ip"]
        dns = data["ip"] + " " + data["name"]
        if File.exists?(host) then
          # check content
          if Digest::MD5.hexdigest(dns) != Digest::MD5.hexdigest(File.read(host)) then
            puts "name change: " + dns
            FileUtils.rm(host) 
          end
        end
        File.open(host, "w+") do |f|
          f.write( dns )
        end
        # puts data
      end
    end
    socket.connect
  end
end

desc 'Push Message'
arg_name ''
command :push do |cmd|
  cmd.action do |global_options,options,args|
    cfg   = @config[:pusher]
    chan  = cfg[:channel]
    event = cfg[:event]

    ifconfig = YAML.load( File.read( @config[:push][:ifconfig] ) )
    payload = ['reductio',ifconfig['ip_addr']]
    Pusher[chan].trigger(event, encode(payload))
  end
end

desc 'Generate Secret-key'
arg_name ''
command :genkey do |cmd|
  cmd.action do |global_options,options,args|
    print SecureRandom.urlsafe_base64(len=32)
  end
end

pre do |global,command,options,args|
  @config = YAML.load( ERB.new( File.read( global[:config] ) ).result )
  @config[:id] = global[:id] || command.name.to_s
  {:args=> args, :global=> global, :options=> options}.each { |k,v| @config[k] = v }
  @config[:key] = File.read( global[:key] )
  @cipher = Gibberish::AES.new(@config[:key])

  # init Pusher
  cfg = @config[:pusher]
  Pusher.app_id = cfg[:app_id]
  Pusher.key    = cfg[:key]
  Pusher.secret = cfg[:secret]
  # Pusher.encrypted = 
end

post do |global,command,options,args|
end

on_error do |exception|
  STDERR.puts exception.backtrace
  # require 'pry'
  #Â binding.pry
  true
end


exit run(ARGV)
