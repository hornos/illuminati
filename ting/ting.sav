#!/usr/bin/env ruby
require 'pusher'
require 'pusher-client'
require 'msgpack'
require 'xz'
require 'ascii85'
require 'gibberish'
require 'securerandom'
require 'digest/md5'
require 'gli'
require 'eat'
require 'sqlite3'
require 'open3'
require 'json'

include GLI::App
program_desc 'The Ting Tings'
version 1.0

### compress
def msgpack(data,enc=:encode)
  return data.to_msgpack if enc == :encode
  MessagePack.unpack(data)
end

def xz(data,enc=:encode)
  return XZ::compress(data) if enc == :encode
  XZ::decompress(data)
end

def ascii85(data,enc=:encode)
  return Ascii85.encode(data) if enc == :encode
  Ascii85.decode(data)
end

### encrypt
def aes(data,enc=:encode)
  return @cipher.enc(data) if enc == :encode
  @cipher.dec(data)
end

def encode(data,redux=@config[:redux])
  redux.inject(data) do |enc,encoder|
    data = send(encoder.to_sym, data, :encode)
  end
  data
end

def decode(data,redux=@config[:redux])
  redux.reverse.inject(data) do |enc,encoder|
    data = send(encoder.to_sym, data, :decode)
  end
  data
end

### upnp
def upnp()
  Open3.popen3('upnpc -l')
end

def upnpip()
  stdin, stdout, stderr = upnp()
  for l in stdout.readlines
    case l
      when /ExternalIPAddress/
        return l.split.last
    end
  end
end

### global options
desc 'Config'
default_value "#{File.basename(__FILE__)}.yml"
arg_name 'config'
flag [:c,:config]

desc 'Secret Key'
default_value "#{File.basename(__FILE__)}.key"
arg_name 'key'
flag [:k,:key]

desc 'Use UPNP'
switch [:u,:upnp]

desc 'Use sqlite3 database'
switch [:s,:sql]

desc 'Ting client'
arg_name ''
command :client do |cmd|
  cmd.action do |global_options,options,args|
    cfg   = @config[:pusher]

    PusherClient.logger = Logger.new(STDOUT)
    PusherClient.logger.level = Logger::INFO
    options = {:secret => cfg[:secret]}
    socket = PusherClient::Socket.new(cfg[:key], options)

    # Subscribe to two channels
    socket.subscribe(cfg[:channel])
    socket[cfg[:channel]].bind(cfg[:event]) do |data|
      subcmd, args = decode(data)
      case subcmd
      when 'ping'
        chan  = cfg[:channel]
        event = cfg[:event]
        if global_options[:u]
          ip = upnpip()
        else
          ip = eat('http://ifconfig.me/ip', :timeout => 10)
        end
        pong = {
          :myid => @config[:myid],
          :ip => ip.strip!
        }
        # Pusher[chan].trigger(event, encode(['pong',@config[:myid],ip.strip!]))
        Pusher[chan].trigger(event, encode(['pong',pong]))
      when 'pong'
        #@db.execute "REPLACE INTO hosts VALUES('"+data[1]+"','"+data[2]+"')" if global_options[:s]
        # puts "Registering host #{data[1]} (#{data[2]})"
        puts args
      else
        puts args
      end
    end # bind

    puts "connect"
    socket.connect
  end
end

desc 'Ping'
arg_name ''
command :ping do |cmd|
  cmd.action do |global_options,options,args|
    cfg   = @config[:pusher]
    chan  = cfg[:channel]
    event = cfg[:event]
    Pusher[chan].trigger(event, encode(['ping',args]))
  end
end

desc 'Generate shared key'
arg_name ''
command :genkey do |cmd|
  cmd.action do |global_options,options,args|
    print SecureRandom.urlsafe_base64(len=32)
  end
end

pre do |global,command,options,args|
  @config = YAML.load( ERB.new( File.read( global[:config] ) ).result )
  @config[:id] = global[:id] || command.name.to_s
  {:args=> args, :global=> global, :options=> options}.each { |k,v| @config[k] = v }
  @config[:key] = File.read( global[:key] )
  @cipher = Gibberish::AES.new(@config[:key])

  # init Pusher
  cfg = @config[:pusher]
  Pusher.app_id = cfg[:app_id]
  Pusher.key    = cfg[:key]
  Pusher.secret = cfg[:secret]
  # Pusher.encrypted =

  puts 'Ting GPUPNP Client'

  if global[:u]
    @externalip = upnpip()
    die('UPNP failed') if @externalip.empty?
    puts "UPNP External IP: #{@externalip}"
  end

  # init DB
  if global[:s]
    @db = SQLite3::Database.open "#{File.basename(__FILE__)}.db"
    @db.execute "CREATE TABLE IF NOT EXISTS hosts(id TEXT PRIMARY KEY, ip TEXT)"
  end
end

post do |global,command,options,args|
end

on_error do |exception|
  STDERR.puts exception.backtrace
  # require 'pry'
  # binding.pry
  true
end

exit run(ARGV)
